{"version":3,"sources":["../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","core/_utilities.scss","core/_mixins.scss","styleguide.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","core/_settings.scss","../node_modules/node-bourbon/node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/grid/_omega.scss","../node_modules/node-neat/node_modules/bourbon-neat/app/assets/stylesheets/functions/_private.scss"],"names":[],"mappings":"AAGE;EACE,uBAAuB,EACxB;;AAED;EAII,oBAAoB,EACrB;;ACZL;EACE,cAAc,EACf;;AAED;EACE,sBAAsB,EACvB;;AAMD;ECXE,cAAc;EACd,kBAAkB;EAClB,mBAAmB,EDWpB;;AEDD;ECmBE,iBCb4B;EDc5B,kBACa;EADb,mBAEc,EDpBf;EAFD;IGOI,YAAY;IACZ,YAAY;IACZ,eAAe,EAChB;;AHNH;EACE,iBAAiB,EAClB;;AAGD;ECUE,iBCb4B;EDc5B,kBACa;EADb,mBAEc,EDXf;EAFD;IGFI,YAAY;IACZ,YAAY;IACZ,eAAe,EAChB;;AHGH;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,oBAAkB,EACnB;;AAGD;EAEE,sBAAsB;EACtB,oBAAkB;EAClB,WAAW,EAeZ;EAnBD;IGdI,YAAY;IACZ,YAAY;IACZ,eAAe,EAChB;EHWH;IIiCI,YAAO;IAGL,eAAe;IAef,sBCtEc;IDuEd,gBC5Ec;ILiChB,mBAAkB;IAClB,wBAAoB;IACpB,mBAAmB,EACpB;IAZH;MIuDQ,gBAA+B,EAChC;IJxDP;MM4CI,gBAA+B,EAChC;IN7CH;MMiDM,YCuBqB,EDtBtB;ENlDL;;IAgBI,eAAe;IACf,oBAAiB,EAClB;;AAGH;EACE,eAAc;EACd,gBAAe;EACf,wBAAqB;EACrB,oBAAoB,EACrB;;AAED;EACE,uBArD6B,EAsD9B;;AAED;EAEE,YAAY;EACZ,iBAAc,EACf;EAJD;IG9CI,YAAY;IACZ,YAAY;IACZ,eAAe,EAChB","file":"styleguide.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n",".u-hide {\n  display: none;\n}\n\n.u-no-bullet {\n  list-style-type: none;\n}\n\n%u-clearfix {\n  @include clearfix;\n}\n\n.u-hide-text {\n  @include hide-text;\n}\n","@mixin hide-text {\n  font: 0 / 0 a;\n  text-shadow: none;\n  color: transparent;\n}\n\n// Mixin to reset the neat omega mixin\n@mixin omega-reset($nth) {\n  &:nth-child(#{$nth}) {\n    margin-right: +flex-gutter();\n  }\n\n  &:nth-child(#{$nth}+1) {\n    clear: none;\n  }\n}\n\n// Mixin for Media Queries\n@mixin mq($mq__breakpoint, $mq__breakpoints: $breakpoints) {\n  $mq__media-query: 'screen and';\n  @if $mq__breakpoint == landscape or $mq__breakpoint == portrait {\n    $mq__media-query: \"#{$mq-media-query} (orientation: #{$mq__breakpoint})\";\n  } @else {\n    // If $mq__breakpoint is a key that exists in\n    // $mq__breakpoints, get and use the value\n    @if map-has-key($mq__breakpoints, $mq__breakpoint) {\n      $mq__breakpoint: map-get($mq__breakpoints, $mq__breakpoint);\n    }\n  }\n\n  @media screen and (min-width: #{$mq__breakpoint}) {\n    @content;\n  }\n}\n\n// Mixin for breaking long words\n@mixin word-break() {\n  word-wrap: break-word;\n  word-break: break-word;\n  hyphens: auto;\n}\n","// Bourbon imports\n@import 'bourbon';\n@import 'neat-helpers';\n@import 'core/settings';\n@import 'neat';\n@import 'core/mixins';\n@import 'core/utilities';\n\n// STYLEGUIDE STYLES\n// ----------------------------------------\n$styleguide-color__accent: #ccc;\n\n// Container\n.styleguide__container {\n  @include outer-container;\n}\n\n.styleguide__header {\n  overflow: hidden;\n}\n\n// Icons\n.styleguide-icons__icon-list {\n  @include outer-container;\n}\n\n.styleguide-icons__icon {\n  display: block;\n  float: left;\n  width: 20%;\n  min-width: rem(180);\n}\n\n// COLORS\n.styleguide-colors {\n  @include clearfix;\n  list-style-type: none;\n  margin: 0 0 rem(20);\n  padding: 0;\n\n  li {\n    @include span-columns(3);\n    @include omega(4n);\n    min-width: rem(200);\n    margin-bottom: space(4);\n    text-align: center;\n  }\n\n  span,\n  strong {\n    display: block;\n    font-size: rem(18);\n  }\n}\n\n.styleguide-colors__circle {\n  width: rem(200);\n  height: rem(200);\n  margin: 0 auto rem(10);\n  border-radius: 100%;\n}\n\n.styleguide-bg {\n  background-color: $styleguide-color__accent;\n}\n\n.styleguide-spacer {\n  @include clearfix;\n  width: 100%;\n  height: rem(50);\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","// Disable Bourbon Prefixes\n$prefix-for-webkit:    false;\n$prefix-for-mozilla:   false;\n$prefix-for-microsoft: false;\n$prefix-for-opera:     false;\n$prefix-for-spec:      false;\n\n// This is the the base for the em/rem mixins and the grid calculation.\n// If your $body__font-size is 100%, leave it at 16px.\n$em-base: 16px;\n\n// GRID\n// ----------------------------------------\n// Since the typical default browser font-size is 16px,\n// that makes the calculation for grid size.\n//\n// THIS VARIABLES ARE FOR NEAT SETTING! DON'T RENAME!\n$gutter:              em(20);\n$grid-columns:        12;\n$max-width:           rem(1200);\n$border-box-sizing:   true;\n\n// Debug Grid\n$visual-grid:         false;\n$visual-grid-color:   #f00;\n$visual-grid-index:   back;\n$visual-grid-opacity: 0.1;\n\n// MEDIAQUERIES\n// ----------------------------------------\n// 640px, 800px, 1200px\n$breakpoints: (\n  medium:   40em,\n  large:    50em,\n  xlarge:   75em\n);\n\n// COLORS\n// --------------------------\n\n// DON'T USE THIS NAME SPECIFIC VARIABLES IN OTHER FILES\n$color__black:              #333;\n$color__white:              #fff;\n\n$color__grey:               #d7d7d7;\n$color__grey--light:        #f0f0f0;\n$color__grey--dark:         #acacac;\n\n$color__orange:             #f08a24;\n$color__red:                #f00;\n$color__blue--light:        #a0d3e8;\n$color__green:              #43ac6a;\n\n$color__brand--one:         #d60051;\n$color__brand--two:         $color__grey;\n\n// COLOR NAMING\n// USE THIS VARIABLES IN OTHER FILES\n$color__primary:            $color__brand--one;\n$color__secondary:          $color__brand--two;\n$color__tertiary:           $color__black;\n\n$color__dark:               $color__black;\n$color__bright:             $color__white;\n\n$color__accent:             $color__grey;\n$color__accent--light:      $color__grey--light;\n$color__accent--dark:       $color__grey--dark;\n\n$color__alert:              $color__red;\n$color__success:            $color__green;\n$color__warning:            $color__orange;\n$color__info:               $color__blue--light;\n\n// SPACES\n// ----------------------------------------\n$space__default-value: 10;  // e.g. used for paddings\n\n$grid__paddings: (\n  small: rem(10),\n  medium: rem(15),\n  large: rem(20)\n);\n\n// TYPOGRAPHY\n// ----------------------------------------\n$font-weight--light:         300;\n$font-weight--regular:       400;\n$font-weight--medium:        400;\n$font-weight--bold:          700;\n\n\n$body__font-family:           \"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;\n$body__font-size:             100%;\n$body__font-weight:           normal;\n$body__font-style:            normal;\n$body__font-color:            $color__dark;\n$body__line-height:           1.2;\n$body__background-color:      $color__bright;\n\n// HEADINGS font styles\n$heading__font-family:        $body__font-family;\n$heading__font-weight:        900;\n$heading__font-style:         normal;\n$heading__font-color:         $body__font-color;\n$heading__text-rendering:     auto;\n\n// PARAGRAPHS\n$paragraph__font-family:      inherit;\n$paragraph__font-weight:      normal;\n$paragraph__font-size:        rem(16);\n$paragraph__line-height:      1.5;\n$paragraph__margin-bottom:    rem(12);\n$paragraph__text-rendering:   auto;\n\n// ANCHORS\n$anchor__text-decoration:     none;\n$anchor__font-color:          $color__primary;\n$anchor__font-color-hover:    $color__secondary;\n$anchor__font-color-active:   $color__tertiary;\n\n// <HR>\n$hr__margin-top:              rem(18);\n$hr__margin-bottom:           $hr__margin-top;\n$hr__border-width:            rem(1);\n$hr__border-style:            solid;\n$hr__border-color:            $body__font-color;\n\n// LISTS\n$list__style-position:        outside;\n$list__side-margin:           0;\n$list__nested-margin:         0;\n$list__side-padding:          rem(18);\n$list__ol-side-padding:       rem(23);\n$list__font-size:             $paragraph__font-size;\n\n// BLOCKQUOTE\n$blockquote__font-family:     inherit;\n$blockquote__font-size:       rem(16);\n$blockquote__font-style:      italic;\n$blockquote__margin:          0 0 $paragraph__margin-bottom 0;\n\n// RADIUS\n$border-radius:               0;\n$border-radius--round:        100%;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n","// Not function for Libsass compatibility\n// https://github.com/sass/libsass/issues/368\n@function is-not($value) {\n  @return if($value, false, true);\n}\n\n// Checks if a number is even\n@function is-even($int) {\n  @return $int % 2 == 0;\n}\n\n// Checks if an element belongs to a list or not\n@function belongs-to($tested-item, $list) {\n  @return is-not(not-belongs-to($tested-item, $list));\n}\n\n@function not-belongs-to($tested-item, $list) {\n  @return is-not(index($list, $tested-item));\n}\n\n// Contains display value\n@function contains-display-value($query) {\n  @return belongs-to(table, $query)\n       or belongs-to(block, $query)\n       or belongs-to(inline-block, $query)\n       or belongs-to(inline, $query);\n}\n\n// Parses the first argument of span-columns()\n@function container-span($span: $span) {\n  @if length($span) == 3 {\n    $container-columns: nth($span, 3);\n    @return $container-columns;\n  } @else if length($span) == 2 {\n    $container-columns: nth($span, 2);\n    @return $container-columns;\n  }\n\n  @return $grid-columns;\n}\n\n@function container-shift($shift: $shift) {\n  $parent-columns: $grid-columns !default !global;\n\n  @if length($shift) == 3 {\n    $container-columns: nth($shift, 3);\n    @return $container-columns;\n  } @else if length($shift) == 2 {\n    $container-columns: nth($shift, 2);\n    @return $container-columns;\n  }\n\n  @return $parent-columns;\n}\n\n// Generates a striped background\n@function gradient-stops($grid-columns, $color: $visual-grid-color) {\n  $transparent: transparent;\n\n  $column-width: flex-grid(1, $grid-columns);\n  $gutter-width: flex-gutter($grid-columns);\n  $column-offset: $column-width;\n\n  $values: ($transparent 0, $color 0);\n\n  @for $i from 1 to $grid-columns*2 {\n    @if is-even($i) {\n      $values: append($values, $transparent $column-offset, comma);\n      $values: append($values, $color $column-offset, comma);\n      $column-offset: $column-offset + $column-width;\n    } @else {\n      $values: append($values, $color $column-offset, comma);\n      $values: append($values, $transparent $column-offset, comma);\n      $column-offset: $column-offset + $gutter-width;\n    }\n  }\n\n  @return $values;\n}\n\n// Layout direction\n@function get-direction($layout, $default) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" or to-upper-case($layout) == \"RTL\" {\n    $direction: direction-from-layout($layout);\n  } @else {\n    $direction: direction-from-layout($default);\n  }\n\n  @return $direction;\n}\n\n@function direction-from-layout($layout) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" {\n    $direction: right;\n  } @else {\n    $direction: left;\n  }\n\n  @return $direction;\n}\n\n@function get-opposite-direction($direction) {\n  $opposite-direction: left;\n\n  @if $direction == \"left\" {\n    $opposite-direction: right;\n  }\n\n  @return $opposite-direction;\n}\n"],"sourceRoot":"/source/"}